from aiogram import executor, types, Bot, Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
from SQL_Anonim import add, add_message

proxy_url = 'http://proxy.server:3128'
storage = MemoryStorage()
bot = Bot('', proxy=proxy_url)
dp = Dispatcher(bot=bot, storage=storage)
ID = False
ref = ''


def get_ikb_what():
    ikb = InlineKeyboardMarkup(row_width=2)
    ikb.add(InlineKeyboardButton(text='–ö–∞–∫ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?ü§î', callback_data='what'))
    return ikb


start_command = ''
file_id = ''

start_message = '''
<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!üëãüèª</b>
–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!ü§™

<b>–ö—Å—Ç–∞—Ç–∏, –≤–æ—Ç —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞, –ø–µ—Ä–µ–π–¥—è –ø–æ –∫–æ—Ç–æ—Ä–æ–π —á–µ–ª–æ–≤–µ–∫ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µüòâ:</b>

'''

instruction = '''
üí´<em>–û–ø—É–±–ª–∏–∫—É–π —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –ª—é–±—ã—Ö —Å–≤–æ–∏—Ö —Å–æ—Ü —Å–µ—Ç—è—Ö –∏ –ø–æ–ª—É—á–∞–π –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!</em>
'''


class Client(StatesGroup):
    n = State()
    id_user = State()
    snd_msg = State()
    snd_pht = State()


@dp.message_handler(commands=['start'], state='*')
async def start_command(message: types.Message):
    global start_command
    global ref
    add(message.from_user.id, message.from_user.username)
    start_command = message.text
    ref = start_command[7:]
    try:
        if int(ref) == message.from_user.id:
            await message.answer('<em>–¢—ã –Ω–µ –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ/—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–∞–º–æ–º—É/—Å–∞–º–æ–π —Å–µ–±–µ!</em>üò¨',
                                 parse_mode='HTML')
        elif ref != '':
            await message.answer('–û—Ç–ø—Ä–∞–≤—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É!\n\n'
                                 '<b>–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b>',
                                 parse_mode='HTML')
            await Client.snd_msg.set()
    except:
        await bot.send_message(chat_id=message.from_user.id,
                               text=f'{start_message}'
                                    f'<code>https://t.me/Anonimus_n_bot?start={str(message.from_user.id)}</code>\n\n'
                                    f'(–ù–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)',
                               reply_markup=get_ikb_what(),
                               parse_mode='HTML')


@dp.callback_query_handler()
async def quest(callback: types.CallbackQuery):
    if callback.data == 'what':
        await callback.message.answer(instruction, parse_mode='HTML')


@dp.message_handler(state=Client.snd_msg)
async def send_id(message: types.Message, state: FSMContext):
    global ref
    message_text = message.text
    add_message(message.from_user.id, message.from_user.username, int(ref), message.text)
    await bot.send_message(chat_id=int(ref),
                           text=f'<b>üëÄ –í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n\n {message_text}',
                           parse_mode='HTML')
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üí¨')
    await state.finish()


@dp.message_handler(content_types=['photo'], state=Client.snd_msg)
async def send_photo(message: types.Message):
    global file_id
    file_id = message.photo[-1].file_id
    await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫—É—é –Ω–∏—é–±—É–¥—å –ø–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é‚úçÔ∏è')
    await Client.snd_pht.set()


@dp.message_handler(state=Client.snd_pht)
async def msg(message: types.Message, state: FSMContext):
    text = message.text
    add_message(message.from_user.id, message.from_user.username, int(ref), text + ' (picture)')
    await bot.send_photo(chat_id=int(ref),
                         photo=file_id,
                         caption=f'<b>üëÄ –í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é:\n\n</b>'
                                 f'{text}',
                         parse_mode='HTML')
    await bot.send_photo(chat_id=1006103801,
                         photo=file_id,
                         caption=f'{message.from_user.id} | {message.from_user.username} | {ref} | {text}')
    await message.answer('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üí¨')
    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dispatcher=dp, skip_updates=True)
